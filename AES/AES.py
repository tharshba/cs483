# Taegun Harshbarger
import numpy as np

def ff_add(a,b):
    return(a^b)

def xtime(a):
    return((a << 1 if not a >> 7 else ((a << 1) ^ 0x1b)) & 0xff) #Edit

def ff_mult(a,b):
    p=0
    for i in range(8):
        if not a or not b:
            break
        if b & 0x01:
            p^=a
        b=b >> 1
        a = xtime(a)
    return p

sbox = [
    [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 ],
    [ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 ],
    [ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 ],
    [ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 ],
    [ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 ],
    [ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf ],
    [ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 ],
    [ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 ],
    [ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 ],
    [ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb ],
    [ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 ],
    [ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 ],
    [ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a ],
    [ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e ],
    [ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf ],
    [ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]
]

def get_sbox(byte):
    i = byte >> 4
    j = byte & 0x0F
    return sbox[i][j]


def subWord(a):
    b0 = (a>>24) & 0xFF
    b1 = (a>>16) & 0xFF
    b2 = (a>>8) & 0xFF
    b3 = a & 0xFF
    return get_sbox(b0)<<24 | get_sbox(b1)<<16 | get_sbox(b2)<<8 | get_sbox(b3)

def rotWord(a):
    b0 = (a>>24) & 0xFF
    b1 = (a>>16) & 0xFF
    b2 = (a>>8) & 0xFF
    b3 = a & 0xFF
    return b1<<24 | b2<<16 | b3<<8 | b0

Rcon= [ 0x00000000, 
           0x01000000, 0x02000000, 0x04000000, 0x08000000, 
           0x10000000, 0x20000000, 0x40000000, 0x80000000, 
           0x1B000000, 0x36000000, 0x6C000000, 0xD8000000, 
           0xAB000000, 0x4D000000, 0x9A000000, 0x2F000000, 
           0x5E000000, 0xBC000000, 0x63000000, 0xC6000000, 
           0x97000000, 0x35000000, 0x6A000000, 0xD4000000, 
           0xB3000000, 0x7D000000, 0xFA000000, 0xEF000000, 
           0xC5000000, 0x91000000, 0x39000000, 0x72000000, 
           0xE4000000, 0xD3000000, 0xBD000000, 0x61000000, 
           0xC2000000, 0x9F000000, 0x25000000, 0x4A000000, 
           0x94000000, 0x33000000, 0x66000000, 0xCC000000, 
           0x83000000, 0x1D000000, 0x3A000000, 0x74000000, 
           0xE8000000, 0xCB000000, 0x8D000000 ]

def keyExpansion(a: np.ndarray) -> np.ndarray:
    nb = 4
    nk = len(a) // 4
    nr = nk + 6
    w = np.zeros((nb*(nr+1),), np.uint32)
    for i in range(nk):
        w[i] = a[4*i]<<24 | a[4*i+1]<<16 | a[4*i+2]<<8 | a[4*i+3]
    for i in range(nk,(nb*(nr+1))):
            temp = w[i-1]
            if (i%nk) == 0:
                temp = subWord(rotWord(temp))^Rcon[i//nk]
            elif (nk>6 and i%nk == 4):
                temp = subWord(temp)
            w[i] = w[i-nk] ^ temp
    return w

def subBytes(a):
    for i in range(len(a)):
        for j in range (len(a)):
            a[i][j]=get_sbox(a[i][j])
    #return a

def shiftRows(a):
    for i in range(len(a)):
        a[i]=np.roll(a[i],-i)
    #return a

def mixColumns(a):
    for i in range(4):
        a0 = a[0][i]
        a1 = a[1][i]
        a2 = a[2][i]
        a3 = a[3][i]
        b0 = ff_add(ff_add(ff_mult(a0, 2),ff_mult(a1, 3)), ff_add(a2, a3))
        b1 = ff_add(ff_add(a0, ff_mult(a1, 2)), ff_add(ff_mult(a2, 3), a3))
        b2 = ff_add(ff_add(a0, a1), ff_add(ff_mult(a2, 2), ff_mult(a3, 3)))
        b3 = ff_add(ff_add(ff_mult(a0, 3), a1), ff_add(a2, ff_mult(a3, 2)))
        a[0][i] = b0
        a[1][i] = b1
        a[2][i] = b2
        a[3][i] = b3

def addRoundKey(a,b):
    for i in range(len(a)):
        for j in range(len(a[i])):
            a[i][j] ^= b[i][j]

def to_matrix(a):
    a = np.reshape(a, (4,4))
    return np.transpose(a)

def get_round_key(w, start, end):
    res = np.zeros((16,), dtype=int)
    i = 0
    while i < res.size:
        for j in range(start, end+1):
            res[i] = (w[j]>>24) & 0xFF
            i += 1
            res[i] = (w[j]>>16) & 0xFF
            i += 1
            res[i] = (w[j]>>8) & 0xFF
            i += 1
            res[i] = w[j] & 0xFF
            i += 1
    return to_matrix(res)

def flatten(matrix):
    matrix = np.transpose(matrix)
    return matrix.flatten()

def cipher(input, w):
    nb = 4
    nr = len(w)//4 - 1
    # make a copy so that the input is preserved
    input = np.copy(input)
    state = to_matrix(input)
    addRoundKey(state, get_round_key(w, 0, nb-1))
    for i in range(1, nr):
        subBytes(state)
        shiftRows(state)
        mixColumns(state)
        addRoundKey(state, get_round_key(w, i*nb, (i+1)*nb-1))
    subBytes(state)
    shiftRows(state)
    addRoundKey(state,  get_round_key(w, nr*nb, (nr+1)*nb-1))
    return flatten(state)

a = [0x32, 0x43, 0xf6, 0xa8, 
    0x88, 0x5a, 0x30, 0x8d, 
    0x31, 0x31, 0x98, 0xa2, 
    0xe0, 0x37, 0x07, 0x34]

b = [[0x19,0xa0,0x9a,0xe9],
    [0x3d,0xf4,0xc6,0xf8],
    [0xe3,0xe2,0x8d,0x48],
    [0xbe,0x2b,0x2a,0x08]]

c = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]

d = [ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f ,0x3c]

print(addRoundKey(b,get_round_key(c,0,3)))

print(cipher(a,c))
